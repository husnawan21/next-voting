import Form from '@/components/Form'
import Menu from '@/components/Menu'
import Layout from '@/components/_layout'
import Head from 'next/head'
import Image from 'next/image'
import DatePicker, { registerLocale } from 'react-datepicker'
import id from 'date-fns/locale/id'
import { useEffect, useState } from 'react'
import 'react-datepicker/dist/react-datepicker.css'
import CandidateForm from '@/components/CandidateForm'
import { PlusIcon } from '@heroicons/react/24/outline'
import Button from '@/components/Button'
import { useSession } from 'next-auth/react'
import RestrictedPage from '@/components/page/RestrictedPage'
import { showAlert } from '@/components/Alert'
import { useRouter } from 'next/router'
import useVote from '@/lib/useVote'

registerLocale('id', id)

export default function DetailOrEditVote() {
	const { data: session } = useSession()

	const [startDateTime, setStartDateTime] = useState(new Date())
	const [endDateTime, setEndDateTime] = useState(new Date())
	const [candidates, setCandidates] = useState<Candidate[]>([])
	const [title, setTitle] = useState('')

	const [loading, setLoading] = useState(false)
	const router = useRouter()

	const { code } = router.query
	const { data: dataVoteApi, error } = useVote(code as string)

	useEffect(() => {
		if (dataVoteApi && dataVoteApi.data) {
			const d = dataVoteApi.data
			setTitle(d.title)
			setStartDateTime(new Date(d.startDateTime))
			setEndDateTime(new Date(d.endDateTime))
			setCandidates(d.candidates)
		}
	}, [dataVoteApi])

	const submitCandidate = (candidate: Candidate) => {
		setCandidates(
			candidates.map(c => (c.key === candidate.key ? candidate : c))
		)
	}

	const addCandidateForm = () => {
		const newCandidate: Candidate = {
			name: '',
			key: candidates.length + 1,
			title: '',
		}

		setCandidates([...candidates, newCandidate])
	}

	const removeCandidateForm = (key: number) => {
		// List kandidat baru kecuali dengan key di atas (key:number)
		const newCandidates = candidates.filter(candidate => candidate.key !== key)

		// Re-arrange atau diurutkan ulang key-nya
		newCandidates.forEach((candidate, index) => {
			candidate.key = index + 1
		})

		setCandidates(newCandidates)
	}

	const updateVote = (e: any) => {
		e.preventDefault()

		// Validasi
		if (title === '') {
			showAlert({ title: 'Waduh... ðŸ˜£', message: 'Judul tidak boleh kosong!' })
			return
		}

		if (candidates.length < 2) {
			showAlert({ title: 'Waduh... ðŸ˜£', message: 'Minimal ada dua kandidat!' })
			return
		}

		if (startDateTime > endDateTime) {
			showAlert({
				title: 'Waduh... ðŸ˜£',
				message: 'Tanggal mulai harus lebih dulu!',
			})
			return
		}

		if (candidates.some(c => c.name === '')) {
			showAlert({
				title: 'Waduh... ðŸ˜£',
				message: 'Nama kandidat tidak boleh kosng!',
			})
			return
		}

		setLoading(true)

		// Mengirim data ke API
		fetch(('/api/votes/' + code) as string, {
			method: 'PUT',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				title,
				startDateTime,
				endDateTime,
				candidates,
			}),
		})
			.then(res => res.json())
			.then(data => {
				showAlert({ title: 'Yeayy ðŸ¤©', message: 'Voting berhasil diubah!' })
				router.push('/')
			})
			.catch(() => {
				showAlert({ title: 'Waduh... ðŸ˜£', message: 'Voting gagal diubah!' })
			})
			.finally(() => {
				setLoading(false)
			})
	}

	if (!session) {
		return <RestrictedPage />
	}

	return (
		<>
			<Head>
				<title>Detail Voting | Pilpilan Voting</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<Layout>
				<Menu />
				<div className='py-6'>
					<Image
						src={'/assets/buat-voting.svg'}
						width={284}
						height={198}
						alt='Buat Vote'
						priority
					/>
					<h1 className='text-4xl font-bold'>Edit Voting</h1>
					<h2 className='mt-3 text-lg text-gray-600'>
						Silakan mengubah data yang dibutuhkan
					</h2>
					<div>
						<form onSubmit={updateVote} className='flex flex-col'>
							{/* <DetailVote> */}
							<div className='w-1/2 space-y-5'>
								<h3 className='mt-10 text-2xl font-medium'>Detail Voting</h3>
								<div className='flex flex-col mt-3'>
									<label className='mt-5 text-sm font-medium text-gray-600'>
										Judul
									</label>
									<Form
										onChange={e => {
											setTitle(e)
										}}
										value={title}
										placeHolder={'Contoh: Voting Calon Mertua'}
										className={'mt-1 w-1/2'}
									/>
								</div>
								<div className='flex flex-col w-full'>
									<label className='text-sm text-gray-600'>
										Kapan dimulai?
									</label>
									<div className='inline-flex'>
										<DatePicker
											locale={id}
											showTimeSelect
											selected={startDateTime}
											onChange={date => date && setStartDateTime(date)}
											dateFormat={'Pp'}
											minDate={new Date()}
											className={
												'w-full py-2 px-4 bg-gray-100 border border-gray-200 rounded'
											}
										/>
										<span className='p-3 text-center textsm'>Sampai</span>
										<DatePicker
											locale={id}
											showTimeSelect
											selected={endDateTime}
											onChange={date => date && setEndDateTime(date)}
											dateFormat={'Pp'}
											minDate={startDateTime}
											className={
												'w-full py-2 px-4 border border-gray-200 bg-gray-100 rounded'
											}
										/>
									</div>
								</div>
							</div>
							{/* </DetailVote> */}

							{/* <Kandidat> */}
							<h3 className='mt-10 text-2xl font-medium'>Kandidat</h3>
							<div className='grid grid-cols-4 gap-4 mt-5'>
								{candidates.map((candidate: Candidate, index: number) => (
									<CandidateForm
										key={index}
										candidate={candidate}
										submitCandidate={submitCandidate}
										removeCandidateForm={removeCandidateForm}
									/>
								))}
								<div
									className='flex flex-col items-center justify-center w-1/3 text-gray-500 bg-gray-100 rounded cursor-pointer aspect-square hover:bg-gray-900 hover:text-white'
									onClick={() => addCandidateForm()}
								>
									<PlusIcon className='w-1/3' />
								</div>
							</div>
							{/* </Kandidat> */}
							{/* {JSON.stringify(candidates)} */}
							<div className='mt-10 text-right'>
								<Button
									label='Simpan Voting ðŸ”¥'
									type='primary'
									isLoading={loading}
								/>
							</div>
						</form>
					</div>
				</div>
			</Layout>
		</>
	)
}
