import { showAlert } from '@/components/Alert'
import Button from '@/components/Button'
import CandidateItem from '@/components/CandidateItem'
import CountDown from '@/components/CountDown/CountDown'
import Menu from '@/components/Menu'
import Layout from '@/components/_layout'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useSession } from 'next-auth/react'
import RestrictedPage from '@/components/page/RestrictedPage'
import useVote from '@/lib/useVote'
import { useEffect, useState } from 'react'
import moment from 'moment'
import useParticipant from '@/lib/useParticipant'

export const STATE_NOT_STARTED = 'STATE_NOT_STARTED',
	STATE_STARTED = 'STATE_STARTED',
	STATE_END = 'STATE_END',
	STATE_LOADING = 'STATE_LOADING'

export default function DetailParticipate() {
	const { data: session } = useSession()

	const router = useRouter()
	const { code } = router.query
	const { data: dataParticipantApi, mutate: mutateParticipantApi } =
		useParticipant(code as string)
	const { data: dataVoteApi, mutate: mutateVoteApi } = useVote(code as string)
	const [selectedCandidate, setSelectedCandidate] = useState<Candidate | null>(
		null
	)

	const [currentState, setCurrentState] = useState(STATE_LOADING)

	const submitVote = async () => {
		if (selectedCandidate) {
			showAlert({
				title: 'Kamu yakin?',
				message: 'Kamu akan memilih kandidat ' + selectedCandidate.name,
				positiveBtnText: 'Ya',
				onPositiveClick: async () => {
					const res = await fetch(
						'/api/participant/' + dataVoteApi?.data?.code,
						{
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({
								candidate: selectedCandidate.name,
								email: session?.user?.email,
							}),
						}
					)

					if (res.status === 200) {
						mutateVoteApi()
						mutateParticipantApi()

						showAlert({
							title: 'Vote berhasil terkirim',
							message: 'Terima kasih telah berpartisipasi 😄',
						})
					}
				},
			})
		} else {
			showAlert({
				title: 'Vote Gagal ❌',
				message: 'Tolong pilih salah satu kandidat',
			})
		}
	}

	useEffect(() => {
		if (dataVoteApi && dataVoteApi.data) {
			const vote = dataVoteApi.data
			if (currentState === STATE_END) {
				return
			}

			const start = moment(vote?.startDateTime)
			const end = moment(vote?.endDateTime)

			const interval = setInterval(async () => {
				const now = moment()

				if (now.isBefore(start)) {
					setCurrentState(STATE_NOT_STARTED)
				} else if (now.isAfter(start) && now.isBefore(end)) {
					setCurrentState(STATE_STARTED)
				} else if (now.isAfter(end)) {
					setCurrentState(STATE_END)
				}
			}, 1000)
			return () => clearInterval(interval)
		}
	}, [dataVoteApi])

	useEffect(() => {
		if (dataParticipantApi && dataVoteApi) {
			const candidate = dataVoteApi.data?.candidates.find(
				c => c.name === dataParticipantApi.data?.candidate
			)

			if (candidate) {
				setSelectedCandidate(candidate)
			}
		}
	}, [dataParticipantApi, dataVoteApi])

	if (!session) {
		return <RestrictedPage />
	}

	return (
		<>
			<Head>
				<title>Pilih Kandidat | Pilpilan Voting</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<Layout>
				<Menu />
				<div>
					<h1 className='mt-10 text-4xl font-bold text-center'>
						{dataVoteApi?.data?.title}
					</h1>
					{/* <Timer> */}
					<CountDown
						start={String(dataVoteApi?.data?.startDateTime)}
						end={String(dataVoteApi?.data?.endDateTime)}
						currentState={currentState}
						className='mt-10'
					/>

					{/* </Timer> */}

					{/* <Kandidat> */}
					<div className='w-2/3 mx-auto mt-10 space-y-4 '>
						{dataVoteApi?.data?.candidates.map(
							(candidate: Candidate, index: number) => (
								<CandidateItem
									onClick={() =>
										!dataParticipantApi?.data &&
										!dataVoteApi.data?.publisher &&
										currentState === STATE_STARTED &&
										setSelectedCandidate(candidate)
									}
									name={candidate.name}
									title={'Kandidat ' + candidate.key}
									index={candidate.key}
									percentage={
										candidate.votes
											? (candidate.votes /
													(dataVoteApi.data?.totalVotes || 0)) *
											  100
											: 0
									}
									// percentage= {candidate.votes ? candidate.votes/dataVoteApi.data?.totalVote*100 : 0}
									isSelected={selectedCandidate?.name === candidate.name}
									key={candidate.key}
								/>
							)
						)}
					</div>
					{/* </Kandidat> */}

					{/* <Submit> */}
					<div className='mt-10 text-center'>
						{session?.user?.email != dataVoteApi?.data?.publisher &&
							!dataParticipantApi?.data &&
							currentState === STATE_STARTED && (
								<Button
									label='Kirim Vote 🔥'
									type='primary'
									onClick={() => submitVote()}
								/>
							)}

						{dataParticipantApi?.data && (
							<span className='px-4 py-2 bg-gray-100 rounded'>
								Kamu sudah memilih, tidak dibolehkan memilih ulang atau
								mengganti pilihan
							</span>
						)}

						{session.user?.email === dataVoteApi?.data?.publisher && (
							<span className='px-4 py-2 bg-gray-100 rounded'>
								Pembuat vote tidak dapat mengikuti voting
							</span>
						)}
					</div>
					{/* </Submit> */}
				</div>
			</Layout>
		</>
	)
}
